# Substitutions for variables
substitutions:
  device_name: "uart-proximity-sensor"
  friendly_name: "UART Proximity Sensor"

globals:
  - id: distance_reading
    type: float
    initial_value: "0.0"

# Core ESPHome configuration
esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  platform: ESP8266
  board: nodemcuv2

  on_boot:
    priority: -10
    then:
      - logger.log:
          format: "Device ${device_name} booted and initialized."

# Logger configuration
logger:
  level: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "UART-Proximity Fallback"
    password: !secret hotspot_wifi_password

api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

# UART configuration
uart:
  tx_pin: GPIO1 # TX pin (ESP8266 default TX is GPIO1)
  rx_pin: GPIO3 # RX pin (ESP8266 default RX is GPIO3)
  baud_rate: 9600 # Match the sensor's baud rate

# UART Sensor
sensor:
  - platform: uart
    name: "Proximity Sensor Distance"
    id: uart_distance
    update_interval: 500ms
    on_value:
      then:
        - lambda: |-
            float distance = atof(x.c_str()); // Parse received distance
            id(distance_reading) = distance;

            if (distance < 20.0) {
              ESP_LOGI("Proximity Sensor", "Distance: %.2f cm - Object is CLOSE", distance);
            } else if (distance < 50.0) {
              ESP_LOGI("Proximity Sensor", "Distance: %.2f cm - Object is NEAR", distance);
            } else {
              ESP_LOGI("Proximity Sensor", "Distance: %.2f cm - Object is FAR", distance);

binary_sensor:
  - platform: status
    name: "Proximity Sensor Status"
    device_class: connectivity

  - platform: template
    name: "Object Detected"
    lambda: |-
      return id(distance_reading) < 50.0;
