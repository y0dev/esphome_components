# Substitutions for variables
substitutions:
  device_name: "uart-proximity-sensor"
  friendly_name: "UART Proximity Sensor"
  device_id: !secret proximity_device_id
  device_auth: !secret proximity_device_auth
  garage_opener_ip: !secret garage_opener_ip
  garage_opener_port: !secret garage_opener_port
  nas_ip: !secret nas_ip_address
  nas_port: !secret nas_log_server_port

globals:
  - id: distance_reading
    type: float
    initial_value: "0.0"

# Core ESPHome configuration
esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  platform: ESP8266
  board: nodemcuv2

  on_boot:
    priority: -10
    then:
      - logger.log:
          format: "Device ${device_name} booted and initialized."
      - lambda: |-
          id(custom_logger).log_message("Info", "Active", "${friendly_name} initialized.");

# Logger configuration
logger:
  level: INFO

# HTTP request client for integration with garage door opener
http_request:
  id: http_client

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "UART-Proximity Fallback"
    password: !secret hotspot_wifi_password

api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

# UART configuration
uart:
  tx_pin: GPIO1 # TX pin (ESP8266 default TX is GPIO1)
  rx_pin: GPIO3 # RX pin (ESP8266 default RX is GPIO3)
  baud_rate: 9600 # Match the sensor's baud rate

# UART Sensor
sensor:
  - platform: uart
    name: "Proximity Sensor Distance"
    id: uart_distance
    update_interval: 500ms
    on_value:
      then:
        - lambda: |-
            float distance = atof(x.c_str()); // Parse received distance
            id(distance_reading) = distance;
            if (distance < 20.0) {
              id(http_client).post("${garage_opener_ip}:${garage_opener_port}/api/proximity", "{\"proximity\": \"CLOSE\"}");
            } else if (distance < 50.0) {
              id(http_client).post("${garage_opener_ip}:${garage_opener_port}/api/proximity", "{\"proximity\": \"NEAR\"}");
            } else {
              id(http_client).post("${garage_opener_ip}:${garage_opener_port}/api/proximity", "{\"proximity\": \"FAR\"}");
            }

binary_sensor:
  - platform: status
    name: "Proximity Sensor Status"
    device_class: connectivity

  - platform: template
    name: "Object Detected"
    lambda: |-
      return id(distance_reading) < 50.0;

light:
  - platform: monochromatic
    name: "Proximity LED Indicator"
    id: proximity_led
    output: led_output

output:
  - platform: esp8266_pwm
    id: led_output
    pin: GPIO4
    frequency: 1000 Hz
